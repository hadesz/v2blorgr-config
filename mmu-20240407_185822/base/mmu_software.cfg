###########################################################################
# Happy Hare supporting macros
#
# This set of macros can be user edited but only macro "variables" declared
# in the macro definition like this:
#
#   variable_my_var: value
#
# will be automatically upgraded between releases (a backup of previous config
# files will always be made for your reference)
#
# It is highly recommended that, if you do change the functionality, where possible
# you simply add a call to your macro to make it easy to update replace on upgrade
#
# The companion 'mmu_sequence.cfg', 'mmu_form_tip.cfg' and 'mmu_cut_tip.cfg' files
# contains sketetons of macros that are expected to be modified and will be
# retained on upgrade
#
# Klipper only allows for a single save_variables file so if you already
# have one you will need to merge the two
[save_variables]
filename: /home/pi/printer_data/config/mmu/mmu_vars.cfg


###########################################################################
# NECESSARY KLIPPER OVERRIDES
# These supplemental settings essentially disable klipper's built in
# extrusion limits and is necessary when using an MMU
#
[extruder]
max_extrude_only_distance: 200
max_extrude_cross_section: 50


###########################################################################
# Tool change macros
# This is automatically created on installation but you can increase
# or reduce this list to match your number of tools in operation
#
[gcode_macro T0]
gcode: MMU_CHANGE_TOOL TOOL=0
[gcode_macro T1]
gcode: MMU_CHANGE_TOOL TOOL=1
[gcode_macro T2]
gcode: MMU_CHANGE_TOOL TOOL=2
[gcode_macro T3]
gcode: MMU_CHANGE_TOOL TOOL=3
[gcode_macro T4]
gcode: MMU_CHANGE_TOOL TOOL=4
[gcode_macro T5]
gcode: MMU_CHANGE_TOOL TOOL=5
[gcode_macro T6]
gcode: MMU_CHANGE_TOOL TOOL=6
[gcode_macro T7]
gcode: MMU_CHANGE_TOOL TOOL=7
[gcode_macro T8]
gcode: MMU_CHANGE_TOOL TOOL=8



###########################################################################
# Simplified subset of commands just for macro visability in
# Mainsail/Fluidd UI (until custom HH panel is complete!)
# The __ is a trick because it is not displayed by the UI but allows for
# similar names to the real commands defined by the klipper module
#
[gcode_macro MMU__EJECT]
gcode: MMU_EJECT

[gcode_macro MMU__HOME]
gcode:
    {% set TOOL = params.TOOL|default(0)|int %}
    {% set FORCE_UNLOAD = params.FORCE_UNLOAD|default(0)|int %}
    MMU_HOME TOOL={TOOL} FORCE_UNLOAD={FORCE_UNLOAD}

[gcode_macro MMU__STATUS]
gcode: MMU_STATUS

[gcode_macro MMU__MOTORS_OFF]
gcode: MMU_MOTORS_OFF

[gcode_macro MMU__SERVO]
gcode:
    {% set POS = params.POS|default("up")|string %}
    MMU_SERVO POS={POS}

[gcode_macro MMU__SELECT_TOOL]
gcode:
    {% set TOOL = params.TOOL|default(0)|int %}
    MMU_SELECT TOOL={TOOL}

[gcode_macro MMU__SELECT_BYPASS]
gcode: MMU_SELECT_BYPASS

[gcode_macro MMU__LOAD_BYPASS]
gcode: MMU_LOAD

[gcode_macro MMU__RECOVER]
gcode: MMU_RECOVER

[gcode_macro MMU__PRELOAD]
gcode:
    {% set GATE = params.GATE|default(0)|int %}
    MMU_PRELOAD GATE={GATE}

[gcode_macro MMU__CHECK_GATE]
gcode:
    {% set GATE = params.GATE|default(-1)|int %}
    {% set TOOL = params.GATE|default(-1)|int %}
    {% set GATES = params.GATE|default('!')|string %}
    {% set TOOLS = params.GATE|default('!')|string %}
    MMU_CHECK_GATE GATE={GATE} TOOL={TOOL} GATES={GATES} TOOLS={TOOLS}

#
# Aliases (for backward compatibility) of previously well used commands...
#
[gcode_macro MMU_CHANGE_TOOL_STANDALONE]
description: Convenience macro for inclusion in print_start for initial tool load
gcode:
    MMU_CHANGE_TOOL {rawparams} STANDALONE=1

[gcode_macro MMU_CHECK_GATES]
description: Alias for updated macro name of MMU_CHECK_GATE
gcode:
    MMU_CHECK_GATE {rawparams}

[gcode_macro MMU_REMAP_TTG]
description: Alias for updated macro name of MMU_TTG_MAP
gcode:
    MMU_TTG_MAP {rawparams}


###########################################################################
# Called when when the MMU action status changes
#
# The `ACTION` parameter will contain the current action string
# (also available in `printer.mmu.action` printer variable).
# Also the previous action is available in `OLD_ACTION`.
#
# See Happy Hare README for full list of action strings, but a quick ref is:
#
#  Idle|Loading|Unloading|Loading Ext|Exiting Ext|Forming Tip|Heating|Checking|Homing|Selecting
#
# The reference logic here drives a set of optional LED's
#
[gcode_macro _MMU_ACTION_CHANGED]
description: Called when an action has changed
gcode:
    {% set ACTION = params.ACTION|string %}
    {% set OLD_ACTION = params.OLD_ACTION|string %}
    {% set gate = printer['mmu']['gate'] %}

    {% if ACTION == "Loading" %}
        _MMU_SET_LED GATE={gate} EXIT_EFFECT=mmu_white_slow_exit STATUS_EFFECT=mmu_white_slow_status
    {% elif ACTION == "Unloading" %}
        _MMU_SET_LED GATE={gate} EXIT_EFFECT=mmu_white_slow_exit STATUS_EFFECT=mmu_white_slow_status
    {% elif ACTION == "Heating" %}
        _MMU_SET_LED GATE={gate} EXIT_EFFECT=mmu_breathing_red_exit STATUS_EFFECT=mmu_breathing_red_status
    {% elif ACTION == "Idle" %}
        _MMU_SET_LED EXIT_EFFECT=default STATUS_EFFECT=default
    {% elif ACTION == "Homing" or ACTION == "Selecting" %}
        {% if OLD_ACTION != "Homing" and OLD_ACTION != "Checking" %}
            _MMU_SET_LED EXIT_EFFECT=mmu_white_fast_exit STATUS_EFFECT=off FADETIME=0
        {% endif %}
    {% elif ACTION == "Checking" %}
        _MMU_SET_LED EXIT_EFFECT=default STATUS_EFFECT=mmu_white_fast_status
    {% endif %}


###########################################################################
# Called when the MMU print state changes
#
# The `STATE` parameter will contain the current state string
# (also available in `printer.mmu.print_state` printer variable)
# Also the previous action is available in `OLD_STATE`.
#
# See Happy Hare README for full list of state strings and the state transition
# diagram, but a quick ref is:
#
#  initialized|ready|started|printing|complete|cancelled|error|pause_locked|paused|standby
#
# The reference logic here drives a set of optional LED's
#
[gcode_macro _MMU_PRINT_STATE_CHANGED]
description: Called when print state changes
gcode:
    {% set STATE = params.STATE|string %}
    {% set OLD_STATE = params.OLD_STATE|string %}
    {% set gate = printer['mmu']['gate'] %}

    {% if STATE == "initialized" %}
        _MMU_SET_LED EXIT_EFFECT=mmu_curtain_exit DURATION=3
    {% elif STATE == "printing" %}
        _MMU_SET_LED EXIT_EFFECT=default ENTRY_EFFECT=default STATUS_EFFECT=default
    {% elif STATE == "pause_locked" %}
        _MMU_SET_LED EXIT_EFFECT=mmu_strobe_exit STATUS_EFFECT=mmu_strobe_status
    {% elif STATE == "paused" %}
        _MMU_SET_LED GATE={gate} EXIT_EFFECT=mmu_strobe_exit STATUS_EFFECT=mmu_strobe_status
    {% elif STATE == "ready" %}
        _MMU_SET_LED EXIT_EFFECT=default ENTRY_EFFECT=default STATUS_EFFECT=default
    {% elif STATE == "complete" %}
        _MMU_SET_LED EXIT_EFFECT=mmu_sparkle_exit STATUS_EFFECT=default DURATION=20
    {% elif STATE == "error" %}
        _MMU_SET_LED EXIT_EFFECT=mmu_strobe_exit STATUS_EFFECT=default DURATION=20
    {% elif STATE == "cancelled" %}
        _MMU_SET_LED EXIT_EFFECT=default ENTRY_EFFECT=default STATUS_EFFECT=default
    {% elif STATE == "standby" %}
        _MMU_SET_LED EXIT_EFFECT=off ENTRY_EFFECT=off STATUS_EFFECT=off
    {% endif %}


###########################################################################
# Called when the MMU gate_map (containing information about the filament
# type, color, availability and spoolId) is updated
#
# The `GATE` parameter will contain the gate that is updated or -1 if all updated
#
# The reference logic here drives a set of optional LED's
#
[gcode_macro _MMU_GATE_MAP_CHANGED]
description: Called when gate map is updated
gcode:
    {% set GATE = params.GATE|int %}
    {% set exit_effect = "" %}
    {% set entry_effect = "" %}
    {% set status_effect = "" %}

    {% set current_exit_effect = printer['gcode_macro _MMU_SET_LED']['current_exit_effect'] %}
    {% if current_exit_effect == "gate_status" or current_exit_effect == "filament_color" %}
        {% set exit_effect=current_exit_effect %}
    {% endif %}
    {% set current_entry_effect = printer['gcode_macro _MMU_SET_LED']['current_entry_effect'] %}
    {% if current_entry_effect == "gate_status" or current_entry_effect == "filament_color" %}
        {% set entry_effect=current_entry_effect %}
    {% endif %}
    {% set current_status_effect = printer['gcode_macro _MMU_SET_LED']['current_status_effect'] %}
    {% if current_status_effect == "filament_color" %}
        {% set status_effect=current_status_effect %}
    {% endif %}

    {% if exit_effect != "" or entry_effect != "" or status_effect != "" %}
        _MMU_SET_LED EXIT_EFFECT={exit_effect} ENTRY_EFFECT={entry_effect} STATUS_EFFECT={status_effect}
    {% endif %}


###########################################################################
# Support macro for MMU neopixel leds
# Variables controlling LED defaults can be set here
#
[gcode_macro _MMU_SET_LED]
description: Called when print state changes

# Default effects for gate LEDs (exit and entry).
# This can be any effect namd or "r,g,b" color, or built-in functional effects:
#   "off"             - LED's off when on action occuring
#   "gate_status"     - indicate gate availability
#   "filament_color"  - indicate filament color
#   "custom_color"    - display set color for each gate
variable_default_exit_effect: "filament_color"
variable_default_entry_effect: "filament_color"

# Default effect for status LED, perhaps lighting the PTFE tube.
# This can be any effect or "r,g,b" color, or built-in functional effects:
#   "off"             - LED's off except when on action occuring
#   "on"              - LED's white (could be any effect or "r,g,b" color)
#   "filament_color"  - indicate current filament color or white if not set
#   "custom_color"    - display set color for current gate
variable_default_status_effect: "filament_color"

# -------------------------- Internal Don't Touch -------------------------
# These variables can be set for visibility but they are automatically reset
# by Happy Hare based on LED h/w setup at bootup. Use `MMU_LED` to modify
# behavior at runtime
variable_led_enable: 0
variable_led_strip: "neopixel:mmu_leds"
variable_exit_first_led_index: -1
variable_exit_reverse_order: 0
variable_entry_first_led_index: -1
variable_entry_reverse_order: 0
variable_status_led_index: -1
variable_current_exit_effect: "none"    # Internal
variable_current_entry_effect: "none"   # Internal
variable_current_status_effect: "none"  # Internal

gcode:
    {% if printer['gcode_macro _MMU_SET_LED']['led_enable'] > 0 %}
        {% set leds = printer['gcode_macro _MMU_SET_LED']['led_strip'] %}
        {% set leds_name = leds.split(':')[1] %}
        {% set EXIT_EFFECT = params.EXIT_EFFECT|default("")|string %}
        {% set ENTRY_EFFECT = params.ENTRY_EFFECT|default("")|string %}
        {% set STATUS_EFFECT = params.STATUS_EFFECT|default("")|string %}
        {% set GATE = params.GATE|default(-1)|int %}
        {% set DURATION = params.DURATION|default(-1)|int %}
        {% set FADETIME = params.FADETIME|default(1)|int %}

        # Grab useful printer variables
        {% set gate_status = printer['mmu']['gate_status'] %}
        {% set gate_color = printer['mmu']['gate_color'] %}
        {% set gate_color_rgb = printer['mmu']['gate_color_rgb'] %}
        {% set custom_color_rgb = printer['mmu']['custom_color_rgb'] %}
        {% set filament_pos = printer['mmu']['filament_pos'] %}
        {% set white_light = (1,1,1) %}
        {% set black_light = (0.01,0,0.02) %}
        {% set empty_light = (0,0,0) %}

        # Determine LED indexes. Gates always first followed by "exit" LED
        {% set exit_first_led_index = printer['gcode_macro _MMU_SET_LED']['exit_first_led_index'] %}
        {% set entry_first_led_index = printer['gcode_macro _MMU_SET_LED']['entry_first_led_index'] %}
        {% set status_index = printer['gcode_macro _MMU_SET_LED']['status_led_index'] %}

        {% if DURATION > 0 %}
            UPDATE_DELAYED_GCODE ID=_MMU_RESET_LED DURATION={DURATION}
        {% else %}
            UPDATE_DELAYED_GCODE ID=_MMU_RESET_LED DURATION=0
        {% endif %}

        {% if EXIT_EFFECT == "default" %}
            {% set EXIT_EFFECT = printer['gcode_macro _MMU_SET_LED']['default_exit_effect'] %}
        {% endif %}
        {% if ENTRY_EFFECT == "default" %}
            {% set ENTRY_EFFECT = printer['gcode_macro _MMU_SET_LED']['default_entry_effect'] %}
        {% endif %}
        {% if STATUS_EFFECT == "default" %}
            {% set STATUS_EFFECT = printer['gcode_macro _MMU_SET_LED']['default_status_effect'] %}
        {% endif %}

        SET_GCODE_VARIABLE MACRO=_MMU_SET_LED VARIABLE=current_exit_effect VALUE='"{EXIT_EFFECT}"'
        SET_GCODE_VARIABLE MACRO=_MMU_SET_LED VARIABLE=current_entry_effect VALUE='"{ENTRY_EFFECT}"'
        SET_GCODE_VARIABLE MACRO=_MMU_SET_LED VARIABLE=current_status_effect VALUE='"{STATUS_EFFECT}"'

        # This simply has the effect of disabling non configured segments
        {% if exit_first_led_index < 1 %}
            {% set EXIT_EFFECT = "" %}
        {% endif %}
        {% if entry_first_led_index < 1 %}
            {% set ENTRY_EFFECT = "" %}
        {% endif %}
        {% if status_led_index < 1 %}
            {% set STATUS_EFFECT = "" %}
        {% endif %}

        # Exit effects...
        {% set segment = "exit" %}
        {% set first = exit_first_led_index %}
        {% if printer['gcode_macro _MMU_SET_LED']['exit_reverse_order'] == 1 %}
            {% set index = first - GATE %}
            {% set count = -1 %}
            {% set last = first - gate_status|length + 1 %}
        {% else %}
            {% set index = first + GATE %}
            {% set count = 1 %}
            {% set last = first + gate_status|length - 1 %}
        {% endif %}

        {% if EXIT_EFFECT == "off" %}
            {% if GATE >= 0 %}
                STOP_LED_EFFECTS LEDS="{leds} ({index})" FADETIME={FADETIME}
                SET_LED LED={leds_name} INDEX={index} RED=0 GREEN=0 BLUE=0 TRANSMIT=1
            {% else %}
                STOP_LED_EFFECTS LEDS="{leds} ({first}-{last})" FADETIME={FADETIME}
                {% for i in range(first, last + count, count) %}
                    SET_LED LED={leds_name} INDEX={i} RED=0 GREEN=0 BLUE=0 TRANSMIT=1
                {% endfor %}
            {% endif %}

        {% elif EXIT_EFFECT == "gate_status" %} # Filament availability
            {% if GATE >= 0 %}
                {% if gate_status[GATE] == -1 %}
                    SET_LED_EFFECT EFFECT=mmu_orange_{segment}_{index} FADETIME={FADETIME} REPLACE=1
                {% elif gate_status[GATE] > 0 %}
                    SET_LED_EFFECT EFFECT=mmu_green_{segment}_{index} FADETIME={FADETIME} REPLACE=1
                {% else %}
                    STOP_LED_EFFECTS LEDS="{leds} ({index})" FADETIME={FADETIME}
                {% endif %}
            {% else %}
                {% for status in gate_status %}
                    {% set current_index = first + loop.index0 * count %}
                    {% if status == -1 %}
                        SET_LED_EFFECT EFFECT=mmu_orange_{segment}_{current_index} FADETIME={FADETIME} REPLACE=1
                    {% elif status > 0 %}
                        SET_LED_EFFECT EFFECT=mmu_green_{segment}_{current_index} FADETIME={FADETIME} REPLACE=1
                    {% else %}
                        STOP_LED_EFFECTS LEDS="{leds} ({current_index})" FADETIME={FADETIME}
                        SET_LED LED={leds_name} INDEX={current_index} RED=0 GREEN=0 BLUE=0 TRANSMIT=1
                    {% endif %}
                {% endfor %}
            {% endif %}

        {% elif EXIT_EFFECT == "filament_color" %} # Filament color
            {% if GATE >= 0 %}
                {% set rgb = gate_color_rgb[GATE] %}
                STOP_LED_EFFECTS LEDS="{leds} ({index})"
                SET_LED LED={leds_name} INDEX={index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
            {% else %}
                STOP_LED_EFFECTS LEDS="{leds} ({first}-{last})"
                {% for rgb in gate_color_rgb %}
                    {% set current_index = first + loop.index0 * count %}
                    {% set current_gate = loop.index0 %}
                    {% if gate_status[current_gate] != 0 %}
                        {% if gate_color[current_gate] == "" %}
                            {% set rgb = white_light %}
                        {% elif rgb == (0,0,0) %}
                            {% set rgb = black_light %}
                        {% endif %}
                    {% else %}
                        {% set rgb = empty_light %}
                    {% endif %}
                    SET_LED LED={leds_name} INDEX={current_index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
                {% endfor %}
            {% endif %}

        {% elif EXIT_EFFECT == "custom_color" %} # Custom color
            {% if GATE >= 0 %}
                {% set rgb = custom_color_rgb[GATE] %}
                STOP_LED_EFFECTS LEDS="{leds} ({index})"
                SET_LED LED={leds_name} INDEX={index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
            {% else %}
                STOP_LED_EFFECTS LEDS="{leds} ({first}-{last})"
                {% for rgb in custom_color_rgb %}
                    {% set current_index = first + loop.index0 * count %}
                    SET_LED LED={leds_name} INDEX={current_index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
                {% endfor %}
            {% endif %}

        {% elif "," in EXIT_EFFECT %} # Not effect, just simple RGB color
            {% set rgb = EXIT_EFFECT.split(",") %}
            {% if GATE >= 0 %}
                STOP_LED_EFFECTS LEDS="{leds} ({index})"
                SET_LED LED={leds_name} INDEX={index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
            {% else %}
                STOP_LED_EFFECTS LEDS="{leds} ({first}-{last})"
                {% for i in range(first, last + count, count) %}
                    SET_LED LED={leds_name} INDEX={i} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
                {% endfor %}
            {% endif %}

        {% elif EXIT_EFFECT != "" %} # Simple effect by name
            {% if GATE >= 0 %}
                SET_LED_EFFECT EFFECT={EXIT_EFFECT}_{index} FADETIME={FADETIME} REPLACE=1
            {% else %}
                SET_LED_EFFECT EFFECT={EXIT_EFFECT} FADETIME={FADETIME} REPLACE=1
            {% endif %}
        {% endif %}

        # Entry effects...
        {% set segment = "entry" %}
        {% set first = entry_first_led_index %}
        {% if printer['gcode_macro _MMU_SET_LED']['entry_reverse_order'] == 1 %}
            {% set index = first - GATE %}
            {% set count = -1 %}
            {% set last = first - gate_status|length + 1 %}
        {% else %}
            {% set index = first + GATE %}
            {% set count = 1 %}
            {% set last = first + gate_status|length - 1 %}
        {% endif %}

        {% if ENTRY_EFFECT == "off" %}
            {% if GATE >= 0 %}
                STOP_LED_EFFECTS LEDS="{leds} ({index})" FADETIME={FADETIME}
                SET_LED LED={leds_name} INDEX={index} RED=0 GREEN=0 BLUE=0 TRANSMIT=1
            {% else %}
                STOP_LED_EFFECTS LEDS="{leds} ({first}-{last})" FADETIME={FADETIME}
                {% for i in range(first, last + count, count) %}
                    SET_LED LED={leds_name} INDEX={i} RED=0 GREEN=0 BLUE=0 TRANSMIT=1
                {% endfor %}
            {% endif %}

        {% elif ENTRY_EFFECT == "gate_status" %} # Filament availability
            {% if GATE >= 0 %}
                {% if gate_status[GATE] == -1 %}
                    SET_LED_EFFECT EFFECT=mmu_orange_{segment}_{index} FADETIME={FADETIME} REPLACE=1
                {% elif gate_status[GATE] > 0 %}
                    SET_LED_EFFECT EFFECT=mmu_green_{segment}_{index} FADETIME={FADETIME} REPLACE=1
                {% else %}
                    STOP_LED_EFFECTS LEDS="{leds} ({index})" FADETIME={FADETIME}
                {% endif %}
            {% else %}
                {% for status in gate_status %}
                    {% set current_index = first + loop.index0 * count %}
                    {% if status == -1 %}
                        SET_LED_EFFECT EFFECT=mmu_orange_{segment}_{current_index} FADETIME={FADETIME} REPLACE=1
                    {% elif status > 0 %}
                        SET_LED_EFFECT EFFECT=mmu_green_{segment}_{current_index} FADETIME={FADETIME} REPLACE=1
                    {% else %}
                        STOP_LED_EFFECTS LEDS="{leds} ({current_index})" FADETIME={FADETIME}
                        SET_LED LED={leds_name} INDEX={current_index} RED=0 GREEN=0 BLUE=0 TRANSMIT=1
                    {% endif %}
                {% endfor %}
            {% endif %}

        {% elif ENTRY_EFFECT == "filament_color" %} # Filament color
            {% if GATE >= 0 %}
                {% set rgb = gate_color_rgb[GATE] %}
                STOP_LED_EFFECTS LEDS="{leds} ({index})"
                SET_LED LED={leds_name} INDEX={index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
            {% else %}
                STOP_LED_EFFECTS LEDS="{leds} ({first}-{last})"
                {% for rgb in gate_color_rgb %}
                    {% set current_index = first + loop.index0 * count %}
                    {% set current_gate = loop.index0 %}
                    {% if gate_status[current_gate] != 0 %}
                        {% if gate_color[current_gate] == "" %}
                            {% set rgb = white_light %}
                        {% elif rgb == (0,0,0) %}
                            {% set rgb = black_light %}
                        {% endif %}
                    {% else %}
                        {% set rgb = empty_light %}
                    {% endif %}
                    SET_LED LED={leds_name} INDEX={current_index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
                {% endfor %}
            {% endif %}

        {% elif ENTRY_EFFECT == "custom_color" %} # Custom color
            {% if GATE >= 0 %}
                {% set rgb = custom_color_rgb[GATE] %}
                STOP_LED_EFFECTS LEDS="{leds} ({index})"
                SET_LED LED={leds_name} INDEX={index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
            {% else %}
                STOP_LED_EFFECTS LEDS="{leds} ({first}-{last})"
                {% for rgb in custom_color_rgb %}
                    {% set current_index = first + loop.index0 * count %}
                    SET_LED LED={leds_name} INDEX={current_index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
                {% endfor %}
            {% endif %}

        {% elif "," in ENTRY_EFFECT %} # Not effect, just simple RGB color
            {% set rgb = ENTRY_EFFECT.split(",") %}
            {% if GATE >= 0 %}
                STOP_LED_EFFECTS LEDS="{leds} ({index})"
                SET_LED LED={leds_name} INDEX={index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
            {% else %}
                STOP_LED_EFFECTS LEDS="{leds} ({first}-{last})"
                {% for i in range(first, last + count, count) %}
                    SET_LED LED={leds_name} INDEX={i} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
                {% endfor %}
            {% endif %}

        {% elif ENTRY_EFFECT != "" %} # Simple effect by name
            {% if GATE >= 0 %}
                SET_LED_EFFECT EFFECT={ENTRY_EFFECT}_{index} FADETIME={FADETIME} REPLACE=1
            {% else %}
                SET_LED_EFFECT EFFECT={ENTRY_EFFECT} FADETIME={FADETIME} REPLACE=1
            {% endif %}
        {% endif %}

        # Status effects...
        {% if STATUS_EFFECT == "off" %}
            STOP_LED_EFFECTS LEDS="{leds} ({status_index})" FADETIME={FADETIME}
            SET_LED LED={leds_name} INDEX={status_index} RED=0 GREEN=0 BLUE=0 TRANSMIT=1

        {% elif STATUS_EFFECT in ["filament_color", "on"] %} # Filament color or On
            {% set gate = printer['mmu']['gate'] %}
            STOP_LED_EFFECTS LEDS="{leds} ({status_index})"
            {% if gate >= 0 and filament_pos > 0 %}
                {% if STATUS_EFFECT != "on" and gate_color[gate] != "" %}
                    {% set rgb = gate_color_rgb[gate] %}
                {% else %}
                    {% set rgb = white_light %}
                {% endif %}
                SET_LED LED={leds_name} INDEX={status_index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
            {% else %}
                SET_LED LED={leds_name} INDEX={status_index} RED=0 GREEN=0 BLUE=0 TRANSMIT=1
            {% endif %}

        {% elif STATUS_EFFECT == "custom_color" %} # Custom color
            {% set gate = printer['mmu']['gate'] %}
            STOP_LED_EFFECTS LEDS="{leds} ({status_index})"
            {% if gate >= 0 and filament_pos > 0 %}
                {% set rgb = custom_color_rgb[gate] %}
                SET_LED LED={leds_name} INDEX={status_index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
            {% else %}
                SET_LED LED={leds_name} INDEX={status_index} RED=0 GREEN=0 BLUE=0 TRANSMIT=1
            {% endif %}

        {% elif "," in STATUS_EFFECT %} # No effect, just simple RGB color
            {% set rgb = STATUS_EFFECT.split(",") %}
            STOP_LED_EFFECTS LEDS="{leds} ({status_index})"
            SET_LED LED={leds_name} INDEX={status_index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1

        {% elif STATUS_EFFECT != "" %} # Simple effect by name
            SET_LED_EFFECT EFFECT={STATUS_EFFECT} FADETIME={FADETIME} REPLACE=1
        {% endif %}
    {% endif %}


###########################################################################
# Helper for LED control
#
[delayed_gcode _MMU_RESET_LED]
gcode:
    _MMU_SET_LED EXIT_EFFECT=default ENTRY_EFFECT=default STATUS_EFFECT=default


###########################################################################
# Define LED effects used in control macros above
#   (requires setup in mmu_hardware.cfg else this will have no effect and can
#    be left as-is so it is ready when you want to add LEDs)
#
# [mmu_led_effect] is a simple wrapper that makes it easy to define based on you MMU setup
#
# E.g. If you have setup the following config in mmu_hardware.cfg for 4-gate MMU
#   [mmu_leds]
#   exit_range:   1-4
#   status_index: 5
#
# E.g. You define "mmu_flash" list this
#   [mmu_led_effect mmu_flash]
#
# This will create effects on each of these segments elements without laborous
# error prone repetition:
#   "mmu_flash_exit" on 'exit' portion of the strip (leds 1,2,3)
#   "mmu_flash_status" on status LED (led 5)
#   "mmu_flash_exit_1" on for gate 0 (led 1)
#   "mmu_flash_exit_2" on for gate 1 (led 2)
#   "mmu_flash_exit_3" on for gate 2 (led 3)
#   "mmu_flash_exit_4" on for gate 3 (led 4)
#
# Then you can set effects with commands like:
#  SET_LED_EFFECT EFFECT=mmu_flash_exit     # apply effect to all exit leds
#  SET_LED_EFFECT EFFECT=mmu_flash_exit_2   # apply effect entry led for gate #1
#
# or set simple RBGW color with commands like:
#  SET_LED LED=mmu_led INDEX=2 RED=50 GREEN=50 BLUE=50 WHITE=0 TRANSMIT=1
#
# Note that gates start at 0, but led indices and effect naming starts from 1,
# so remember index = gate + 1
#
[mmu_led_effect mmu_breathing_red]
layers:       breathing 4 0 top (1,0,0)

[mmu_led_effect mmu_white_slow]
layers:       breathing 1.0 0 top (0.8,0.8,0.8)

[mmu_led_effect mmu_white_fast]
layers:       breathing 0.6 0 top (0.2,0.2,0.2)

[mmu_led_effect mmu_strobe]
layers:       strobe    1 1.5 add (1,1,1)
              breathing 2 0   difference (0.95,0,0)
              static    0 0   top (1,0,0)

[mmu_led_effect mmu_green]
frame_rate:   12
layers:       static 0 0 top (0,0.5,0)

[mmu_led_effect mmu_orange]
frame_rate:   12
layers:       static 0 0 top (0.5,0.2,0)

[mmu_led_effect mmu_curtain]
define_on:    exit
layers:       comet -1.5 1.0 add (0.4,0.4,0.4),(0,0,1)
              comet  1.5 1.0 top (0.4,0.4,0.4),(1,0,0)

[mmu_led_effect mmu_sparkle]
define_on:    exit
layers:       twinkle 8 0.15 top (0.3,0.3,0.3), (0.4,0,0.25)

