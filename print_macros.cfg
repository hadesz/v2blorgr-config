#[gcode_macro CALIBRATE_Z]
#rename_existing: BASE_CALIBRATE_Z
#gcode:
#    CG28
#    M117 Z-Calibration..
#    _SET_LOWER_STEPPER_CURRENT  # I lower the stepper current for homing and probing 
#    ATTACH_PROBE                # a macro for fetching the probe first
#    BASE_CALIBRATE_Z
#    DETACH_PROBE                # and parking it afterwards
#    _RESET_STEPPER_CURRENT      # resetting the stepper current
#    M117


[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(105)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(225)|float %}
    {% set PA_MAT = params.PA|default(0.056)|float %}
    {% set TOOL = params.TOOL|default(0)|int %}
    set_nozzle_leds_on
    status_homing
    # Start bed heating
    M140 S{BED_TEMP}
    # Reset the G-Code Z offset (adjust Z offset if needed)
#    SET_GCODE_OFFSET Z=0.0
    BED_MESH_CLEAR
    {% if not 'xy' in printer.toolhead.homed_axes %}
      G28 X Y
    {% endif %}
    ATTACH_PROBE_LOCK
    # Home the printer
    # status_heating
    # M109 S150
    {% if not 'xyz' in printer.toolhead.homed_axes %}
      G28 Z
    {% endif %}
    {% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}
      UNLOAD_FILAMENT
      status_cleaning
      CLEAN_NOZZLE SKIP_PURGE=true
  #    status_homing
      G28 Z
    {% endif %}
#    {% if not quad_gantry_level.applied %}
#      quad_gantry_level
#      M109 S{EXTRUDER_TEMP}
#      G28 Z
#    {% endif %}
    status_heating
    M190 S{BED_TEMP}
#    status_calibrating_z
#    CALIBRATE_Z
#    SCREWS_TILT_CALCULATE MAX_DEVIATION=0.05
#    BED_MESH_PROFILE LOAD={BED_TEMP}C
    BED_MESH_CALIBRATE 
    SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE={PA_MAT}
    DOCK_PROBE_UNLOCK
    SAVE_GCODE_STATE NAME=start_print
    # Use absolute coordinates
    G90
    # Move the nozzle near the bed
    #G1 Y290 Z5 F3000
    # Move the nozzle very close to the bed
    #G1 Z0.15 F300
    G1 X250 Y307 F3000
    status_heating
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    # To make filament swap possible
    M109 S235
    # LOAD_FILAMENT
    {% if TOOL > 8 %}
      MMU_SELECT_BYPASS
      PAUSE
    {% else %}
      T{TOOL}
    {% endif %}
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}
    status_printing
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0.35

    G92 E0 ;Reset Extruder
    G1 E3 F240 ; finish loading and small purge
    G1 E2.75 F900 ; finish loading and small purge
    G1 E2.99 F240 ; finish loading and small purge
    G92 E0 ;Reset Extruder
    CLEAN_NOZZLE SKIP_PURGE=1
    SKEW_PROFILE LOAD=CaliFlower


#M83 ; extruder relative mode
    #G1 X2 Y10 F3000
    #G1 Z0.28 F240
    #G92 E0
    #G1 Y140 E10 F1500 ; prime the nozzle
    #G1 X2.3 F5000
    #G92 E0
    #G1 Y10 E10 F1200 ; prime the nozzle
    #G92 E0 ;Reset Extruder
    #G1 Z2.0 F3000 ;Move Z Axis up
    #G1 X2.1 Y20 Z0.28 F5000.0 ;Move to start position
    #G1 X2.1 Y200.0 Z0.28 F1500.0 E15 ;Draw the first line
    #G1 X2.4 Y200.0 Z0.28 F5000.0 ;Move to side a little
    #G1 X2.4 Y20 Z0.28 F1500.0 E30 ;Draw the second line
    #G92 E0 ;Reset Extruder
    #G1 Z2.0 F3000 ;Move Z Axis up
    RESTORE_GCODE_STATE NAME=start_print


[gcode_macro END_PRINT]
gcode:
    SAVE_GCODE_STATE NAME=end_print
    SET_SKEW CLEAR=1

    M83
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2
    # Raise nozzle by 10mm
    G1 Z10 F3000
    G90
    G28 X Y
    # UNLOAD_FILAMENT
    MMU_UNLOAD
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    G92 E0 ;Reset Extruder
    # Disable steppers
#    M84
    status_off
    set_nozzle_leds_off
    RESTORE_GCODE_STATE NAME=end_print

# ============== Filament change

[gcode_macro M600]
gcode:
        PAUSE
        UNLOAD_FILAMENT
        M117 Run Load Filiment Macro before resuming

[gcode_macro UNLOAD_FILAMENT]
gcode:
    M117 Unloading...
    SAVE_GCODE_STATE NAME=filamentload
    MMU_UNLOAD
    RESTORE_GCODE_STATE NAME=filamentload

[gcode_macro LOAD_FILAMENT]
description: Loads filament

gcode:
    {% set SKIP_PURGE = params.SKIP_PURGE | default(false) %}
    {% set ESLOW = params.ESLOW | default(4) | float %}
    {% set EFAST = params.EFAST | default(80) | float %}

    M117 loading...
    SAVE_GCODE_STATE NAME=filamentload
    G90
    G1 E{EFAST} F900 ;load filiment into afterbuner
    {% if 'xyz' in printer.toolhead.homed_axes and not SKIP_PURGE %}
      # Move the nozzle over purge bucket
      G1 X30 Y309 F3000
      M83 ;relitive extruder mode
      G1 E{ESLOW} F240 ; finish loading and small purge
    {% endif %}
#    _RAISE_ERROR_IF_NO_FILAMENT
    RESTORE_GCODE_STATE NAME=filamentload
    M117 Filament Loaded

[gcode_macro _RAISE_ERROR_IF_NO_FILAMENT]
gcode:
    {% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == False %}
      {action_raise_error("No filament detected after load filament!")}
    {% endif %}

# ============== Heat soak

[gcode_macro HEAT_SOAK]
description: heats the bed for a while

variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0
variable_active_button: -1

gcode:
    {% set TARGET = params.TARGET | default(0) | float %}
    {% set DURATION = (params.DURATION | default(5) | int) * 60 %} ## minutes to seconds
    {% set MOTORS_OFF = params.MOTORS_OFF | default(true) %}
    {% set ACTIVE_BUTTON = params.BTN | default(-1) %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=active_button  VALUE={ACTIVE_BUTTON}

    {% if printer["gcode_macro HEAT_SOAK"].stage == "soaking" and printer["gcode_macro HEAT_SOAK"].target_temp == TARGET %}
      SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    {% else %}

      # _set_heat_soak_button_led r=0.45 g=0 b=0.01
      SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
      SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
      SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
      SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0
  
      status_heating
  
      ;; fire up the heater
      SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }
  
      ;; run the fan to circulate air
      M106 S128
      SET_FAN_SPEED FAN=exhaust_fan SPEED=1
  
      ;; put the bed and nozzle where they're a safe distance apart
      {% if 'xyz' not in printer.toolhead.homed_axes %}
        G28
      {% endif %}
      CENTER

      {% if MOTORS_OFF %}
        M84 ;; turn off steppers
      {% endif %}
  
      UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

    {% endif %}

[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1

[delayed_gcode heat_soaker]
; ## debug
; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
        # _set_heat_soak_button_led r=0.5 g=0.15 b=0
        _status_button_standby BUTTON={heat_soak.active_button}
    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
            # _set_heat_soak_button_led r=0.04 g=0.25 b=0.01
            _status_button_ready BUTTON={heat_soak.active_button}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "done" %}
            TURN_OFF_HEATERS
            _status_button_ready BUTTON={heat_soak.active_button}
            M107 ; turn off fan

            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
        {% endif %}

        SET_FAN_SPEED FAN=exhaust_fan SPEED=0.35

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    {% else %}

        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}

[gcode_macro CENTER]
gcode:
  SAVE_GCODE_STATE NAME=centering
  # Use absolute coordinates
  G90
  # Move the nozzle near the bed
  G1 X150 Y150 Z50 F3000
  RESTORE_GCODE_STATE NAME=centering


[gcode_macro CASE_LIGHT]
gcode:
  {% set LP = params.LP|default(50)|int %}
  SET_PIN PIN=caselight VALUE={ LP / 100 }

[gcode_macro _toggle_case_light]
description: simple case light toggle

variable_state_off: True

gcode:
    {% if state_off %}
      CASE_LIGHT LP=75
      _set_case_light_button_led r=0.25 g=0.16 b=0.1
    {% else %}
      CASE_LIGHT LP=0
      _set_case_light_button_led r=0.2 g=0.2 b=0.2
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_toggle_case_light VARIABLE=state_off VALUE={ not state_off }



[gcode_macro BED_MESH_CALIBRATE_AREA]
#rename_existing: BED_MESH_CALIBRATE
; gcode parameters
variable_parameter_AREA_START : 5,25
variable_parameter_AREA_END : 295,300
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 2
; minimum probe count
variable_min_probe_count : 4
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
; enable preference index
variable_enable_reference_index : False
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
		{% set area_min_y = params.AREA_START.split(",")[1]|float %}
		{% set area_max_x = params.AREA_END.split(",")[0]|float %}
		{% set area_max_y = params.AREA_END.split(",")[1]|float %}

		{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
        {% else %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% endif %}

		{% set meshMaxPointX = meshPointX %}
		{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            {% set algorithm = "lagrange" %}
            {% if "algorithm" in bedMeshConfig and meshPointX >=4 and meshPointY >=4 %}
                {% set algorithm = bedMeshConfig.algorithm %}
            {% endif %}

            {% if enable_reference_index %}
                {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
                BED_MESH_CALIBRATE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
            {% else %}
                BED_MESH_CALIBRATE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
            {% endif %}
        {% else %}
            BED_MESH_CALIBRATE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE
    {% endif %}

